AWSTemplateFormatVersion: "2010-09-09"
Description: My VPC Configuration

Parameters:
  MyIPAddress:
    Type: String
    Description: This must be a check your pc valid Public IP address.
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/32
    ConstraintDescription: must be a valid IP address of the form x.x.x.x/32
    Default: "0.0.0.0/32"
  KeyPairName:
    Type: String
    # Default: new-key-pair
    Description: The key pair used to access the instance.
  VpcCidr:
    Type: String
    Description: VPC CIDR
    Default: "10.1.0.0/16"
  AvailabilityZoneA:
    Type: String
    Description: AvailabilityZone A
    Default: "eu-west-1a" # A 대신 B
  AvailabilityZoneC:
    Type: String
    Description: AvailabilityZone C
    Default: "eu-west-1c" # B 대신 D

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: my-vpc-17
  
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.1.0/26
      AvailabilityZone: !Ref AvailabilityZoneA
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: my-public-subnet-a-17
  PublicSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.1.64/26
      AvailabilityZone: !Ref AvailabilityZoneC
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: my-public-subnet-c-17
  PrivateSubnetAppA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.1.128/27
      AvailabilityZone: !Ref AvailabilityZoneA
      Tags:
        - Key: Name
          Value: my-private-subnet-app-a-17
  PrivateSubnetAppC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.1.160/27
      AvailabilityZone: !Ref AvailabilityZoneC
      Tags:
        - Key: Name
          Value: my-private-subnet-app-c-17
  PrivateSubnetDbA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.1.192/27
      AvailabilityZone: !Ref AvailabilityZoneA
      Tags:
        - Key: Name
          Value: my-private-subnet-db-a-17
  PrivateSubnetDbC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.1.224/27
      AvailabilityZone: !Ref AvailabilityZoneC
      Tags:
        - Key: Name
          Value: my-private-subnet-db-c-17

  IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: my-igw-17
  Attachigw:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref IGW
      VpcId: !Ref VPC
  
  EIP:
    Type: AWS::EC2::EIP
    Properties:
      Tags:
        - Key: Name
          Value: my-eip-17
  NGW:
    Type: AWS::EC2::NatGateway
    DependsOn: Attachigw
    Properties:
      AllocationId: !GetAtt EIP.AllocationId
      SubnetId: !Ref PublicSubnetA
      Tags:
        - Key: Name
          Value: my-ngw-17

  PublicRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: my-public-rt-17
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: Attachigw
    Properties:
      RouteTableId: !Ref PublicRT
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW
  PublicSubnetARTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRT
      SubnetId: !Ref PublicSubnetA
  PublicSubnetCRTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRT
      SubnetId: !Ref PublicSubnetC

  PrivateRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: my-private-rt-17
  PrivateRoute:
    Type: AWS::EC2::Route
    DependsOn: Attachigw
    Properties:
      RouteTableId: !Ref PrivateRT
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NGW
  PrivateSubnetAppARTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRT
      SubnetId: !Ref PrivateSubnetAppA
  PrivateSubnetAppCRTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRT
      SubnetId: !Ref PrivateSubnetAppC
  PrivateSubnetDbARTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRT
      SubnetId: !Ref PrivateSubnetDbA
  PrivateSubnetDbCRTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRT
      SubnetId: !Ref PrivateSubnetDbC

#   PublicSecurityGroup:
#     Type: AWS::EC2::SecurityGroup
#     Properties:
#       GroupName: "Public subnet Security Group"
#       GroupDescription: Enable HTTP access via port 80
#       VpcId: !Ref VPC
#       SecurityGroupIngress:
#       - IpProtocol: tcp
#         FromPort: 80
#         ToPort: 80
#         CidrIp: 0.0.0.0/0
#       Tags:
#         - Key: Name
#           Value: my-asg-app-alb-sg-17
#   BastionSecurityGroup:
#     Type: AWS::EC2::SecurityGroup
#     Properties:
#       GroupName: "Bastion host Security Group"
#       GroupDescription: Enable HTTP access via port 80  and SSH access via port 22
#       VpcId: !Ref VPC
#       SecurityGroupIngress:
#       - IpProtocol: tcp
#         FromPort: 80
#         ToPort: 80
#         CidrIp: !Ref MyIPAddress
#       - IpProtocol: tcp
#         FromPort: 22
#         ToPort: 22
#         CidrIp: !Ref MyIPAddress
#       Tags:
#         - Key: Name
#           Value: my-openvpn-sg-17
#   PrivateSecurityGroup:
#     Type: AWS::EC2::SecurityGroup
#     Properties:
#       GroupName: "Private subnet Security Group"
#       GroupDescription: Enable HTTP access via port 80  and SSH access via port 22
#       VpcId: !Ref VPC
#       SecurityGroupIngress:
#       - IpProtocol: tcp
#         FromPort: 80
#         ToPort: 80
#         SourceSecurityGroupName:
#           Ref: BastionSecurityGroup
#       - IpProtocol: tcp
#         FromPort: 22
#         ToPort: 22
#         SourceSecurityGroupName:
#           Ref: BastionSecurityGroup
#       Tags:
#         - Key: Name
#           Value: my-asg-app-ec2-sg-17

#   # ImportedKeyPair:
#   #   Type: AWS::EC2::KeyPair
#   #   Properties:
#   #     KeyName: ec2-user17
#   #     PublicKeyMaterial: ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDMLZOe/nhncMSdjSIiMud1P2BLxgzGvopj7cCBZ1A/swCGlgE4eyLp+t1KiPNKBZpSj/pd6qEbfupCXZNz4xEnlAVxrb5FWe4UtefTH5vB3U9Lw7NL8YgpExpbXC3hXgle8PYIdWl2urhe4Sfx4LH1sFKdaud28ZLNXHh5yfny7cMxAQhH5p8gxNZQ9mYVAmuVKrXW7h8h6uBqiREVFgBsyDtVMG7PyCI9N07iXwAj+bg/C+le0Jn7SKXpbp1pz2Jns+ZwyHQGbEryKF0OcIeYfYzkC1jo70W6l4UZ7VYv/lxvW1K+yhGnkhIlrdzdzhadZzkTu1BGt7ctqYxsxngz
#   BastionHostInstance:
#     Type: AWS::EC2::Instance
#     DependsOn: 
#     - PublicSubnetA
#     - BastionSecurityGroup
#     Properties:
#       ImageId: ami-0f5d6de5da0f4ec33
#       InstanceType: t2.micro
#       KeyName: !Ref KeyPairName
#       SubnetId: !Ref PublicSubnetA
#       SecurityGroupIds:
#         - !Ref BastionSecurityGroup
#       Tags:
#         - Key: Name
#           Value: my-bastion-host-17

# Outputs:
#   PublicIp:
#     Value:
#       Fn::GetAtt:
#         - BastionHostInstance
#         - PublicIp
#     Description: Bastion host Ip Address